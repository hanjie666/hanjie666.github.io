<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BFS广度优先算法</title>
    <url>/posts/1df858f4/</url>
    <content><![CDATA[<hr>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>广度优先算法一般适用于求最短最短时间、最短路径、最少交换次数等等题，经过这几天的刷题，总结了以下广度优先算法模板。</p>
</blockquote>
<a id="more"></a>

<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[][]; <span class="comment">//用来存二维数组</span></span><br><span class="line"><span class="keyword">int</span> dir[][];<span class="comment">//用来存储方向</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存储点的坐标</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">//判断点是否合法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pointcheck</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> xx , <span class="keyword">int</span> yy)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;node&gt; iq;</span><br><span class="line">    node start,<span class="built_in">end</span>;</span><br><span class="line">    start.x = xx;</span><br><span class="line">    start.y = yy;</span><br><span class="line">    iq.push(start);</span><br><span class="line">    <span class="keyword">while</span>(!iq.empty())&#123;</span><br><span class="line">        start = iq.front();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//上下左右移动坐标</span></span><br><span class="line">            <span class="built_in">end</span>.x = star.x + dir[][<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">end</span>.y = star.x + dir[][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pointcheck() &amp;&amp; <span class="built_in">map</span>==<span class="string">"终点"</span>)&#123;</span><br><span class="line">                <span class="built_in">map</span>[<span class="built_in">end</span>.x][<span class="built_in">end</span>.y] = ‘标记已经遍历过’;</span><br><span class="line">                次数++;</span><br><span class="line">                iq.push();<span class="comment">//出队列</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        iq.pop();<span class="comment">//把剩余的元素出对</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>学会了基本的DFS思想还是不太够的，题目灵活多变，需要灵活运用，一般灵活运用结构体能够更加方便的解决问题。</p>
]]></content>
      <categories>
        <category>ACM暑假集训笔记</category>
      </categories>
      <tags>
        <tag>ACM暑假集训笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP8266制作wifi杀手教程</title>
    <url>/posts/c2e7ec67/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>WiFi杀手表白神器烧录固件和使用教程</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>

<p>​                                                                        <a id="more"></a></p>
<p>第一步打开电脑设备管理器</p>
<p>输入win+x然后打开设备管理器</p>
<p><img src="https://i.loli.net/2019/07/08/5d233e91768ad79948.png" alt="5a44031864da9898632015728294470.png"></p>
<p>然后将ESP8266用数据线链接电脑</p>
<p><img src="https://i.loli.net/2019/07/08/5d233f357ec7218158.jpg" alt="91845ec6c03120176123656a9e882ba.jpg"></p>
<p>然后看电脑是否多出来这么个东西</p>
<p><img src="https://i.loli.net/2019/07/08/5d233f69da8d311730.png" alt="a84bd464b62511489159cf29416e6af.png"></p>
<p>然后打开烧录软件</p>
<p><img src="https://i.loli.net/2019/07/08/5d233fd46d17b55507.png" alt="76e047002e68a362c7159c88ab9382b.png"></p>
<p>点击Config</p>
<p><img src="https://i.loli.net/2019/07/08/5d233ff93624a84473.png" alt="81f9cf48e5d9252ca6509cdb1013648.png"></p>
<p>然后选择要刷入的wifi杀手固件，最好把固件放在桌面或者全英文的路径下面</p>
<p><img src="https://i.loli.net/2019/07/08/5d234043826eb95391.png" alt="4107a565e2684e2ef180ed9470796b0.png"></p>
<p>然后点击Operation，点击Flash</p>
<p><img src="https://i.loli.net/2019/07/08/5d2340983da8494470.png" alt="35e8708092671bce4b2eea0f65ad0ee.png"></p>
<p>然后开发板会亮蓝灯，等待进度条刷完即可</p>
<p><img src="https://i.loli.net/2019/07/08/5d2340e932a7583929.png" alt="1bce847d9b380d8d153bbb593e4b1a6.png"></p>
<p>这样子就把固件刷进去了，接下来开始奔放</p>
<p>按一下板子上的RST按键或者重新插一下板子，然后会生成一个名字叫pwned的wifi，密码是deauther.打开手机wifi链接上去。</p>
<p>然后打开浏览器输入192.168.4.1或者打开wifi杀手软件</p>
<p><img src="https://i.loli.net/2019/07/08/5d23426c604a868809.png" alt="520ded33636d3efeb420d72e4ae21d3.png"></p>
<p>然后选择你需要攻击的wifi，点击攻击选项，即可奔放。</p>
<p><img src="https://i.loli.net/2019/07/08/5d2342b7d03f628841.png" alt="37c14b5f8a643feda800ba677125e44.png"></p>
<p>​                <blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>​                Deauth：攻击选中的ap[wifi]内的选中的mac[你的室友]，默认为全部攻击</p>
<p>​                Beacon：生成48个假wifi，打广告标表白必备</p>
<p>​                Probe-Request：生成一堆让你手机以为以前连过的热点，然后手机自动连接</p>
<p>​                </p>

            <i class="fa fa-quote-right"></i>
          </blockquote>    </p>
<p>​                <blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>​                <a href="https://www.lanzous.com/i4x5nni" target="_blank" rel="noopener">点我下载软件和固件包</a></p>
<p>​                </p>

            <i class="fa fa-quote-right"></i>
          </blockquote></p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>ESP8266</tag>
      </tags>
  </entry>
  <entry>
    <title>String转json(java)</title>
    <url>/posts/1ae16226/</url>
    <content><![CDATA[<p>之前困扰的问题，经常用post请求的时候会返回json格式的数据，然而长长用string类型接收。下面是string转json的方法</p>
<a id="more"></a>

<p>先导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>1.json格式的string类型直接转json</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&#123;"url":"http://139.224.236.108/nocode.php？id=476a9a35cde84f4dbc9657b665f4bd67","result":"succ"&#125;</span></span><br><span class="line">JSONObject jsonObject = JSONObject.parseObject(String类型);</span><br><span class="line">String value = jsonObject.getString(key);</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>java基础知识点整理</title>
    <url>/posts/226062a4/</url>
    <content><![CDATA[<a id="more"></a>

<p>String</p>
<p>.equals()比较的是两个字符串的值</p>
<p>==比较的是两个字符串的地址</p>
]]></content>
  </entry>
  <entry>
    <title>redis学习笔记</title>
    <url>/posts/a07904b2/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为最近做项目的时候要求用cookie+redis实现单点登录，然后发送的邮箱验证码应该也要存在redis里面，所以得复习下redis，顺便做下笔记</p>
<a id="more"></a>

<p><strong>关于redis</strong></p>
<p>redis是非关系型数据库，存key，value形式的，比如username,zhangshan这种。</p>
<p><strong>jedis</strong></p>
<p>一款java操作redis数据库的工具</p>
<p>1.获取链接</p>
<p>Jedis jedis = new Jedis();//如果使用空参构造，默认值“localhost”,6379端口</p>
<p>2.操作</p>
<p>jedis.set(“username”,”zhangsan”);</p>
<p>//可以使用setex()方法储存可以指定过期的时间</p>
<p>jedis.setex(“activeCode”,20,”hehe”);</p>
<p><strong>jedis连接池</strong></p>
<p>0.创建一个配置对象</p>
<p>JedisPoolConfig config = new JedisPoolConfig();</p>
<p>con.setMaxTotal(50);</p>
<p>1.创建jedisPool连接池对象</p>
<p>JedisPool jedisPool = new JedisPool();</p>
<p>2.获取链接</p>
<p>Jedis jedis = JedisPool.getResource();</p>
<p>3.使用</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis,java</tag>
      </tags>
  </entry>
  <entry>
    <title>java接口化编程(HttpClient)</title>
    <url>/posts/45193fde/</url>
    <content><![CDATA[<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>之前一直想学的用java实现post和get请求今天终于把他搞定了</p>
</blockquote>
<a id="more"></a>

<p>首先jar包先打包好：<a href="https://www.lanzous.com/i61l84f" target="_blank" rel="noopener">点我下载</a></p>
<p>做个笔记，以后忘记了麻烦‘</p>
<h4 id="get方式"><a href="#get方式" class="headerlink" title="get方式"></a>get方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无参数Get方式</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGeByNoParam</span><span class="params">(String Url)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获得Http客户端(可以理解为:你得先有一个浏览器;注意:实际上HttpClient与浏览器是不一样的)</span></span><br><span class="line">    CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line">    <span class="comment">// 创建Get请求</span></span><br><span class="line">    HttpGet httpGet = <span class="keyword">new</span> HttpGet(Url);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应模型</span></span><br><span class="line">    CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 由客户端执行(发送)Get请求</span></span><br><span class="line">        response = httpClient.execute(httpGet);</span><br><span class="line">        <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">        HttpEntity responseEntity = response.getEntity();</span><br><span class="line">        System.out.println(<span class="string">"响应状态为:"</span> + response.getStatusLine());</span><br><span class="line">        <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"响应内容长度为:"</span> + responseEntity.getContentLength());</span><br><span class="line">            System.out.println(<span class="string">"响应内容为:"</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带参数的Get请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Param</span> content</span></span><br><span class="line"><span class="comment"> * get请求后面？内容，比如http://xyb666.cn?key=？&amp;value=?</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGetByParam</span><span class="params">(String Url,String Content)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获得Http客户端(可以理解为:你得先有一个浏览器;注意:实际上HttpClient与浏览器是不一样的)</span></span><br><span class="line">    CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line">    <span class="comment">// 参数</span></span><br><span class="line">    StringBuffer params = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    params.append(Content);</span><br><span class="line">    <span class="comment">//try &#123;</span></span><br><span class="line">        <span class="comment">// 字符数据最好encoding以下;这样一来，某些特殊字符才能传过去(如:某人的名字就是“&amp;”,不encoding的话,传不过去)</span></span><br><span class="line">        <span class="comment">//params.append("name=" + URLEncoder.encode("&amp;", "utf-8"));</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// &#125; catch (UnsupportedEncodingException e1) &#123;</span></span><br><span class="line">       <span class="comment">// e1.printStackTrace();</span></span><br><span class="line">   <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Get请求</span></span><br><span class="line">    HttpGet httpGet = <span class="keyword">new</span> HttpGet(Url + <span class="string">"?"</span> + params);</span><br><span class="line">    <span class="comment">// 响应模型</span></span><br><span class="line">    CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 配置信息</span></span><br><span class="line">        RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">                <span class="comment">// 设置连接超时时间(单位毫秒)</span></span><br><span class="line">                .setConnectTimeout(<span class="number">5000</span>)</span><br><span class="line">                <span class="comment">// 设置请求超时时间(单位毫秒)</span></span><br><span class="line">                .setConnectionRequestTimeout(<span class="number">5000</span>)</span><br><span class="line">                <span class="comment">// socket读写超时时间(单位毫秒)</span></span><br><span class="line">                .setSocketTimeout(<span class="number">5000</span>)</span><br><span class="line">                <span class="comment">// 设置是否允许重定向(默认为true)</span></span><br><span class="line">                .setRedirectsEnabled(<span class="keyword">true</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将上面的配置信息 运用到这个Get请求里</span></span><br><span class="line">        httpGet.setConfig(requestConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 由客户端执行(发送)Get请求</span></span><br><span class="line">        response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">        HttpEntity responseEntity = response.getEntity();</span><br><span class="line">        System.out.println(<span class="string">"响应状态为:"</span> + response.getStatusLine());</span><br><span class="line">        <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"响应内容长度为:"</span> + responseEntity.getContentLength());</span><br><span class="line">            System.out.println(<span class="string">"响应内容为:"</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                httpClient.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="post方式"><a href="#post方式" class="headerlink" title="post方式"></a>post方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Post无参方式</span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPostByNoParam</span><span class="params">(String Url)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得Http客户端(可以理解为:你得先有一个浏览器;注意:实际上HttpClient与浏览器是不一样的)</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Post请求</span></span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(Url);</span><br><span class="line">        <span class="comment">// 响应模型</span></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 由客户端执行(发送)Post请求</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">            HttpEntity responseEntity = response.getEntity();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"响应状态为:"</span> + response.getStatusLine());</span><br><span class="line">            <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"响应内容长度为:"</span> + responseEntity.getContentLength());</span><br><span class="line">                System.out.println(<span class="string">"响应内容为:"</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 释放资源</span></span><br><span class="line">                <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    httpClient.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Post有参数的方式,参数为一个对象</span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPostByObject</span><span class="params">(String Url ,Object object)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获得Http客户端(可以理解为:你得先有一个浏览器;注意:实际上HttpClient与浏览器是不一样的)</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Post请求</span></span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(Url);</span><br><span class="line">        <span class="comment">/*User user = new User();</span></span><br><span class="line"><span class="comment">        user.setName("潘晓婷");</span></span><br><span class="line"><span class="comment">        user.setAge(18);</span></span><br><span class="line"><span class="comment">        user.setGender("女");</span></span><br><span class="line"><span class="comment">        user.setMotto("姿势要优雅~");*/</span></span><br><span class="line">        <span class="comment">// 我这里利用阿里的fastjson，将Object转换为json字符串;</span></span><br><span class="line">        <span class="comment">// (需要导入com.alibaba.fastjson.JSON包)</span></span><br><span class="line">        String jsonString = JSON.toJSONString(object);</span><br><span class="line">        httpPost.setHeader(<span class="string">"Token"</span>,<span class="string">"5cf8ff0c4557dcd1a1ac3de3f8769cac"</span>);</span><br><span class="line">        StringEntity entity = <span class="keyword">new</span> StringEntity(jsonString, <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// post请求是将参数放在请求体里面传过去的;这里将entity放入post请求体中</span></span><br><span class="line">        httpPost.setEntity(entity);</span><br><span class="line"></span><br><span class="line">        httpPost.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应模型</span></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 由客户端执行(发送)Post请求</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">            HttpEntity responseEntity = response.getEntity();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"响应状态为:"</span> + response.getStatusLine());</span><br><span class="line">            <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"响应内容长度为:"</span> + responseEntity.getContentLength());</span><br><span class="line">                System.out.println(<span class="string">"响应内容为:"</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 释放资源</span></span><br><span class="line">                <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    httpClient.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	 <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Post有参数的方式,参数为正常参数</span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPostByParam</span><span class="params">(String Url, HashMap&lt;String,String&gt; ParamsMap)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获得Http客户端(可以理解为:你得先有一个浏览器;注意:实际上HttpClient与浏览器是不一样的)</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line">        <span class="comment">// 创建Post请求</span></span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(Url);</span><br><span class="line">        <span class="comment">// 响应模型</span></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//将Map集合转换成Param</span></span><br><span class="line">        List&lt;NameValuePair&gt; Param = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; keyset = ParamsMap.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key:keyset) &#123;</span><br><span class="line">            Param.add(<span class="keyword">new</span> BasicNameValuePair(key,ParamsMap.get(key)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            httpPost.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(Param));</span><br><span class="line">            <span class="comment">// 由客户端执行(发送)Post请求</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">            HttpEntity responseEntity = response.getEntity();</span><br><span class="line">            System.out.println(<span class="string">"响应状态为:"</span> + response.getStatusLine());</span><br><span class="line">            <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"响应内容长度为:"</span> + responseEntity.getContentLength());</span><br><span class="line">                System.out.println(<span class="string">"响应内容为:"</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这个是知识点，还可以封装成工具类</p>
<p><strong>HttpClientUtils</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.weixin.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.ParseException;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.ClientProtocolException;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.config.RequestConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicNameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参数Get方式</span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGeByNoParam</span><span class="params">(String Url)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获得Http客户端(可以理解为:你得先有一个浏览器;注意:实际上HttpClient与浏览器是不一样的)</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line">        <span class="comment">// 创建Get请求</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(Url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应模型</span></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 由客户端执行(发送)Get请求</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line">            <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">            HttpEntity responseEntity = response.getEntity();</span><br><span class="line">            System.out.println(<span class="string">"响应状态为:"</span> + response.getStatusLine());</span><br><span class="line">            <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"响应内容长度为:"</span> + responseEntity.getContentLength());</span><br><span class="line">                System.out.println(<span class="string">"响应内容为:"</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 释放资源</span></span><br><span class="line">                <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    httpClient.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带参数的Get请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> content</span></span><br><span class="line"><span class="comment">     * get请求后面？内容，比如http://xyb666.cn?key=？&amp;value=?</span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGetByParam</span><span class="params">(String Url,String Content)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获得Http客户端(可以理解为:你得先有一个浏览器;注意:实际上HttpClient与浏览器是不一样的)</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line">        <span class="comment">// 参数</span></span><br><span class="line">        StringBuffer params = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        params.append(Content);</span><br><span class="line">        <span class="comment">//try &#123;</span></span><br><span class="line">            <span class="comment">// 字符数据最好encoding以下;这样一来，某些特殊字符才能传过去(如:某人的名字就是“&amp;”,不encoding的话,传不过去)</span></span><br><span class="line">            <span class="comment">//params.append("name=" + URLEncoder.encode("&amp;", "utf-8"));</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// &#125; catch (UnsupportedEncodingException e1) &#123;</span></span><br><span class="line">           <span class="comment">// e1.printStackTrace();</span></span><br><span class="line">       <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Get请求</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(Url + <span class="string">"?"</span> + params);</span><br><span class="line">        <span class="comment">// 响应模型</span></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 配置信息</span></span><br><span class="line">            RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">                    <span class="comment">// 设置连接超时时间(单位毫秒)</span></span><br><span class="line">                    .setConnectTimeout(<span class="number">5000</span>)</span><br><span class="line">                    <span class="comment">// 设置请求超时时间(单位毫秒)</span></span><br><span class="line">                    .setConnectionRequestTimeout(<span class="number">5000</span>)</span><br><span class="line">                    <span class="comment">// socket读写超时时间(单位毫秒)</span></span><br><span class="line">                    .setSocketTimeout(<span class="number">5000</span>)</span><br><span class="line">                    <span class="comment">// 设置是否允许重定向(默认为true)</span></span><br><span class="line">                    .setRedirectsEnabled(<span class="keyword">true</span>).build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将上面的配置信息 运用到这个Get请求里</span></span><br><span class="line">            httpGet.setConfig(requestConfig);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 由客户端执行(发送)Get请求</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">            HttpEntity responseEntity = response.getEntity();</span><br><span class="line">            System.out.println(<span class="string">"响应状态为:"</span> + response.getStatusLine());</span><br><span class="line">            <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"响应内容长度为:"</span> + responseEntity.getContentLength());</span><br><span class="line">                System.out.println(<span class="string">"响应内容为:"</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 释放资源</span></span><br><span class="line">                <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    httpClient.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Post无参方式</span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPostByNoParam</span><span class="params">(String Url)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得Http客户端(可以理解为:你得先有一个浏览器;注意:实际上HttpClient与浏览器是不一样的)</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Post请求</span></span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(Url);</span><br><span class="line">        <span class="comment">// 响应模型</span></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 由客户端执行(发送)Post请求</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">            HttpEntity responseEntity = response.getEntity();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"响应状态为:"</span> + response.getStatusLine());</span><br><span class="line">            <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"响应内容长度为:"</span> + responseEntity.getContentLength());</span><br><span class="line">                System.out.println(<span class="string">"响应内容为:"</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 释放资源</span></span><br><span class="line">                <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    httpClient.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Post有参数的方式,参数为一个对象</span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPostByObject</span><span class="params">(String Url ,Object object)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获得Http客户端(可以理解为:你得先有一个浏览器;注意:实际上HttpClient与浏览器是不一样的)</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Post请求</span></span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(Url);</span><br><span class="line">        <span class="comment">/*User user = new User();</span></span><br><span class="line"><span class="comment">        user.setName("潘晓婷");</span></span><br><span class="line"><span class="comment">        user.setAge(18);</span></span><br><span class="line"><span class="comment">        user.setGender("女");</span></span><br><span class="line"><span class="comment">        user.setMotto("姿势要优雅~");*/</span></span><br><span class="line">        <span class="comment">// 我这里利用阿里的fastjson，将Object转换为json字符串;</span></span><br><span class="line">        <span class="comment">// (需要导入com.alibaba.fastjson.JSON包)</span></span><br><span class="line">        String jsonString = JSON.toJSONString(object);</span><br><span class="line">        httpPost.setHeader(<span class="string">"Token"</span>,<span class="string">"5cf8ff0c4557dcd1a1ac3de3f8769cac"</span>);</span><br><span class="line">        StringEntity entity = <span class="keyword">new</span> StringEntity(jsonString, <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// post请求是将参数放在请求体里面传过去的;这里将entity放入post请求体中</span></span><br><span class="line">        httpPost.setEntity(entity);</span><br><span class="line"></span><br><span class="line">        httpPost.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=utf8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应模型</span></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 由客户端执行(发送)Post请求</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">            HttpEntity responseEntity = response.getEntity();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"响应状态为:"</span> + response.getStatusLine());</span><br><span class="line">            <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"响应内容长度为:"</span> + responseEntity.getContentLength());</span><br><span class="line">                System.out.println(<span class="string">"响应内容为:"</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 释放资源</span></span><br><span class="line">                <span class="keyword">if</span> (httpClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    httpClient.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPostByParam</span><span class="params">(String Url, HashMap&lt;String,String&gt; ParamsMap)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获得Http客户端(可以理解为:你得先有一个浏览器;注意:实际上HttpClient与浏览器是不一样的)</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line">        <span class="comment">// 创建Post请求</span></span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(Url);</span><br><span class="line">        <span class="comment">// 响应模型</span></span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//将Map集合转换成Param</span></span><br><span class="line">        List&lt;NameValuePair&gt; Param = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; keyset = ParamsMap.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key:keyset) &#123;</span><br><span class="line">            Param.add(<span class="keyword">new</span> BasicNameValuePair(key,ParamsMap.get(key)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            httpPost.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(Param));</span><br><span class="line">            <span class="comment">// 由客户端执行(发送)Post请求</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">            HttpEntity responseEntity = response.getEntity();</span><br><span class="line">            System.out.println(<span class="string">"响应状态为:"</span> + response.getStatusLine());</span><br><span class="line">            <span class="keyword">if</span> (responseEntity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"响应内容长度为:"</span> + responseEntity.getContentLength());</span><br><span class="line">                System.out.println(<span class="string">"响应内容为:"</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有一种方式，先记录，以后再做比较</p>
<p>这个是知识点，还可以封装成工具类</p>
<p><strong>HttpClientUtils</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.http.Header;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.StatusLine;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicNameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">post</span><span class="params">(String url, HashMap&lt;String,String&gt; ParamsMap)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HttpPost post = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line"></span><br><span class="line">        List&lt;NameValuePair&gt; pairs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keyset = ParamsMap.keySet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String key:keyset) &#123;</span><br><span class="line">            pairs.add(<span class="keyword">new</span> BasicNameValuePair(key,ParamsMap.get(key)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        post.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(pairs));</span><br><span class="line"></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        CloseableHttpResponse response = httpClient.execute(post);</span><br><span class="line"></span><br><span class="line">        HttpEntity entity = response.getEntity();</span><br><span class="line"></span><br><span class="line">        String result = EntityUtils.toString(entity);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">(String url)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        HttpGet get = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line">        <span class="comment">//3.准备一个发包客户端</span></span><br><span class="line"></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class="line">        <span class="comment">//4.通过客户端发包--&gt;响应                                          </span></span><br><span class="line">        CloseableHttpResponse response = httpClient.execute(get);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.状态行                                             </span></span><br><span class="line">        StatusLine statusLine = response.getStatusLine();</span><br><span class="line">        System.out.println(statusLine);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.响应头                                            </span></span><br><span class="line">        Header[] headers = response.getAllHeaders();</span><br><span class="line"></span><br><span class="line">        System.out.println(headers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.响应体                                          </span></span><br><span class="line">        HttpEntity entity = response.getEntity();</span><br><span class="line">        String entitys = EntityUtils.toString(entity);</span><br><span class="line">        System.out.println(entitys);</span><br><span class="line">        <span class="keyword">return</span> entitys;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装nginx</title>
    <url>/posts/14f93e78/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>docker安装nginx</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>

<a id="more"></a>

<h3 id="第一步、拉取nginx镜像"><a href="#第一步、拉取nginx镜像" class="headerlink" title="第一步、拉取nginx镜像"></a>第一步、拉取nginx镜像</h3><p>1，拉取镜像到容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>

<p>2.查看镜像id</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images nginx</span><br></pre></td></tr></table></figure>

<h3 id="第二步、创建并启动nginx容器"><a href="#第二步、创建并启动nginx容器" class="headerlink" title="第二步、创建并启动nginx容器"></a>第二步、创建并启动nginx容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name mynginx -p 80:80 镜像id</span><br><span class="line"></span><br><span class="line">-d   指定容器以守护进程方式在后台运行</span><br><span class="line">--name 指定容器名称</span><br><span class="line">-p 指定主机与容器内部的端口号映射关系，格式 -p  [宿主机端口号]：[容器内部端口]</span><br></pre></td></tr></table></figure>

<h6 id="命令执行成功会返回容器ID"><a href="#命令执行成功会返回容器ID" class="headerlink" title="命令执行成功会返回容器ID"></a>命令执行成功会返回容器ID</h6><p>使用<strong>docker ps</strong>可以查看正在运行的nginx容器</p>
<p>然后在浏览器内访问主机ip地址，可以看到nginx的欢迎页，如果是云服务器一般需要<strong>开放端口</strong></p>
<h3 id="第三步、修改nginx的配置文件"><a href="#第三步、修改nginx的配置文件" class="headerlink" title="第三步、修改nginx的配置文件"></a>第三步、修改nginx的配置文件</h3><blockquote>
<p>一般使用将nginx容器的内部配置文件挂载到主机的方法，方便后续的配置</p>
</blockquote>
<p>1.在主机/mnt目录下执行 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p .&#x2F;nginx&#x2F;&#123;conf,html,logs&#125; &#x2F;&#x2F;创建挂载目录</span><br></pre></td></tr></table></figure>

<p>2.将容器内部的nginx.conf和default.conf文件分别拷贝到主机/mnt/nginx目录与/mnt/nginx/conf目录下，在/mnt/nginx目录下执行下面两条语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker cp nginx容器id:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf .&#x2F;</span><br><span class="line"></span><br><span class="line">docker cp nginx容器id:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf .&#x2F;conf&#x2F;</span><br></pre></td></tr></table></figure>

<p>3.停止刚刚创建的nginx容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop 容器id</span><br><span class="line"></span><br><span class="line">docker rm 容器id</span><br></pre></td></tr></table></figure>

<p>4.执行下面命令，重新创建nginx容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name mynginx -p 80:80 -v &#x2F;mnt&#x2F;nginx&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf -v &#x2F;mnt&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx -v &#x2F;mnt&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html -v &#x2F;mnt&#x2F;nginx&#x2F;conf:&#x2F;etc&#x2F;nginx&#x2F;conf.d --privileged&#x3D;true 容器id</span><br></pre></td></tr></table></figure>

<ul>
<li>-v 挂载目录，格式 -v: 表示将主机目录与容器目录之间进行共享</li>
<li>–privileged=true 容器内部对挂载的目录拥有读写等特权</li>
</ul>
<p>5.这时我们在容器的挂载 <code>/mnt/nginx/html</code>目录下创建<code>index.html,</code>内容随便写上<code>hello nginx</code>，再次访问主机IP，然后就可以访问了。</p>
<h5 id="需要注意的：我们在挂载目录的操作，都实际会映射到容器内部，写配置文件的时候一定要注意路径问题！！"><a href="#需要注意的：我们在挂载目录的操作，都实际会映射到容器内部，写配置文件的时候一定要注意路径问题！！" class="headerlink" title="需要注意的：我们在挂载目录的操作，都实际会映射到容器内部，写配置文件的时候一定要注意路径问题！！"></a><code>需要注意的：我们在挂载目录的操作，都实际会映射到容器内部，写配置文件的时候一定要注意路径问题！！</code></h5><p>一般在/mnt/nginx/conf/default.conf配置修改nginx配置</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker,nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot资料整合</title>
    <url>/posts/6463279b/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>直接搬运觉得不错的文章</p>
<a id="more"></a>

<h1 id="Spring-Boot：整合Swagger文档"><a href="#Spring-Boot：整合Swagger文档" class="headerlink" title="Spring Boot：整合Swagger文档"></a><a href="https://www.cnblogs.com/xifengxiaoma/p/11022146.html" target="_blank" rel="noopener">Spring Boot：整合Swagger文档</a></h1><h1 id="Spring-Boot：实现MyBatis分页"><a href="#Spring-Boot：实现MyBatis分页" class="headerlink" title="Spring Boot：实现MyBatis分页"></a><a href="https://www.cnblogs.com/xifengxiaoma/p/11027551.html" target="_blank" rel="noopener">Spring Boot：实现MyBatis分页</a></h1>]]></content>
  </entry>
  <entry>
    <title>java发送邮件</title>
    <url>/posts/36ccc2bf/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>java发送邮箱验证码</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>

<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--验证码依赖--&gt;</span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.sun.mail&#x2F;javax.mail --&gt;</span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;com.sun.mail&lt;&#x2F;groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;javax.mail&lt;&#x2F;artifactId&gt;   </span><br><span class="line">    &lt;version&gt;1.5.4&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhbit.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 发件人的 邮箱 和 密码（替换为自己的邮箱和密码）</span></span><br><span class="line"><span class="comment">// PS: 某些邮箱服务器为了增加邮箱本身密码的安全性，给 SMTP 客户端设置了独立密码（有的邮箱称为“授权码”）,</span></span><br><span class="line"><span class="comment">//     对于开启了独立密码的邮箱, 这里的邮箱密码必需使用这个独立密码（授权码）。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String account = <span class="string">"13553232959@163.com"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String password = <span class="string">"chjwudi008"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 网易163邮箱的 SMTP 服务器地址为: smtp.163.com</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String myEmailSMTPHost = <span class="string">"smtp.163.com"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送邮件的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to 邮件的接收方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 邮件的激活码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(String to, String code)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1.创建连接对象，链接到邮箱服务器</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties(); <span class="comment">// 参数配置</span></span><br><span class="line">        props.setProperty(<span class="string">"mail.transport.protocol"</span>, <span class="string">"smtp"</span>);<span class="comment">// 使用的协议（JavaMail规范要求）</span></span><br><span class="line">        props.setProperty(<span class="string">"mail.smtp.host"</span>, myEmailSMTPHost);<span class="comment">// 发件人的邮箱的 SMTP 服务器地址</span></span><br><span class="line">        props.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>); <span class="comment">// 需要请求认证</span></span><br><span class="line"><span class="comment">// 2.根据配置创建会话对象, 用于和邮件服务器交互</span></span><br><span class="line">        Session session = Session.getInstance(props, <span class="keyword">new</span> Authenticator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(account,password);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 3.创建邮件对象</span></span><br><span class="line">            Message message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">        <span class="comment">// 3.1设置发件人</span></span><br><span class="line">            message.setFrom(<span class="keyword">new</span> InternetAddress(account));</span><br><span class="line">        <span class="comment">// 3.2设置收件人</span></span><br><span class="line">            message.setRecipient(Message.RecipientType.TO, <span class="keyword">new</span> InternetAddress(to));</span><br><span class="line">        <span class="comment">// 3.3设置邮件的主题</span></span><br><span class="line">            message.setSubject(<span class="string">"来自珠海科技促进会激活邮件"</span>);</span><br><span class="line">        <span class="comment">// 3.4设置邮件的正文</span></span><br><span class="line">        <span class="comment">//message.setContent("&lt;h1&gt;来自智慧电梯的激活邮件，您的验证码是：&lt;/h1&gt;&lt;h3&gt;&lt;a href='http://localhost:10080/Demo_JavaMail/active?code=" + code + "'&gt;http://localhost:10080/Demo_JavaMail/active?code=" + code + "&lt;/h3&gt;", "text/html;charset=UTF-8");</span></span><br><span class="line">            message.setContent(<span class="string">"&lt;h1&gt;来自珠海科技促进会的激活邮件，您的验证码是："</span>+ code, <span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        <span class="comment">// 4.发送邮件</span></span><br><span class="line">            Transport.send(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java,发送邮件</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm整合</title>
    <url>/posts/91794a99/</url>
    <content><![CDATA[<hr>
<blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote>
<p>ssm整合笔记</p>
<a id="more"></a>

<h3 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h3><h5 id="创建maven过慢解决"><a href="#创建maven过慢解决" class="headerlink" title="创建maven过慢解决"></a>创建maven过慢解决</h5><p>archetypeCatalog</p>
<p>internal</p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="https://i.loli.net/2019/09/10/wanFfodArQItSqV.png" alt="1568119321.png"></p>
<h3 id="web-xml跟pro-xml配置"><a href="#web-xml跟pro-xml配置" class="headerlink" title="web.xml跟pro.xml配置"></a>web.xml跟pro.xml配置</h3><h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">version</span>=<span class="string">"3.1"</span> <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="pro-xml"><a href="#pro-xml" class="headerlink" title="pro.xml"></a>pro.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">shiro.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">shiro.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">spring.security.version</span>&gt;</span>5.0.1.RELEASE<span class="tag">&lt;/<span class="name">spring.security.version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 锁定jar包版本 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 项目依赖jar包 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-taglibs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.security.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--HttpClient--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Json--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dao层配置文件开始--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///hanjie"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"chj0609"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置SqlSession工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描pojo包，给包下所有pojo对象起别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.hanjie.domain"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描接口包路径，生成包下所有接口的代理对象，并放入spring容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.hanjie.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dao层配置文件结束--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--service层配置文件开始--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解的扫描配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hanjie"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置哪些不扫描--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aop面向切面编程，切面就是切入点和通知的组合--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务的通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"advice"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.hanjie.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"advice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--service层配置文件结束--&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置创建 spring 容器要扫描的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.hanjie"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 制定扫包规则 ,只扫描使用@Controller 注解的 JAVA 类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 过滤静态资源 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/layui/**"</span> <span class="attr">location</span>=<span class="string">"/layui/"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/login/**"</span> <span class="attr">location</span>=<span class="string">"/login/"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span> <span class="attr">location</span>=<span class="string">"/images/"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/jquery/**"</span> <span class="attr">location</span>=<span class="string">"/jquery/"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启springmvc注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.hanjie.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findbyid"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> &gt;</span></span><br><span class="line">        insert into user values (null ,#&#123;username&#125;,#&#123;phone&#125;,#&#123;dormitoryAddress&#125;,#				&#123;deliveryAddress&#125;,#&#123;deliveryNumber&#125;,#&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"FindUserByPage"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        select * from user limit 0,10</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCount"</span>  <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        select count(*) from user where 1 = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deletes"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> &gt;</span></span><br><span class="line">       delete from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>sprintboot+pagehelper实现mybatis分页</title>
    <url>/posts/d5b5ecab/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>springboot使用pagehelper分页</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>

<a id="more"></a>

<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><h5 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="配置分页插件"><a href="#配置分页插件" class="headerlink" title="配置分页插件"></a>配置分页插件</h5><p>在 application.yml 配置文件中添加分页插件有关的配置。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pagehelper   </span></span><br><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line">    <span class="attr">helperDialect:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">reasonable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">supportMethodsArguments:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">params:</span> <span class="string">count=countSql</span></span><br></pre></td></tr></table></figure>

<h5 id="项目结构-1"><a href="#项目结构-1" class="headerlink" title="项目结构"></a>项目结构</h5><h6 id="分页的实体类"><a href="#分页的实体类" class="headerlink" title="分页的实体类"></a>分页的实体类</h6><p>PageRequest.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanjie.ljtools.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: ljtools</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hanjie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-04-02 11:17</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageRequest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageNum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每页数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Pageresult.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanjie.ljtools.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: ljtools</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hanjie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-04-02 11:20</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageNum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每页数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> totalSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页码总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalPages;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据模型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;?&gt; content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分页查询相关工具类。</p>
<p>PageUtils.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanjie.ljtools.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.entity.PageRequest;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.entity.PageResult;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: ljtools</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hanjie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-04-02 11:25</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将分页信息封装到统一的接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PageResult <span class="title">getPageResult</span><span class="params">(PageInfo&lt;?&gt; pageInfo)</span> </span>&#123;</span><br><span class="line">        PageResult pageResult = <span class="keyword">new</span> PageResult();</span><br><span class="line">        pageResult.setPageNum(pageInfo.getPageNum());</span><br><span class="line">        pageResult.setPageSize(pageInfo.getPageSize());</span><br><span class="line">        pageResult.setTotalSize(pageInfo.getTotal());</span><br><span class="line">        pageResult.setTotalPages(pageInfo.getPages());</span><br><span class="line">        pageResult.setContent(pageInfo.getList());</span><br><span class="line">        <span class="keyword">return</span> pageResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="编写dao层代码"><a href="#编写dao层代码" class="headerlink" title="编写dao层代码"></a>编写dao层代码</h6><p>跟普通的查询语句一样，直接查询全部信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanjie.ljtools.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.entity.PageRequest;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.entity.Url;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: ljtools</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hanjie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-23 20:50</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IJumpDao</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from tools_jump where adminNickName = #&#123;adminNickName&#125; ORDER BY createTime"</span>)</span><br><span class="line">    <span class="function">List&lt;Url&gt; <span class="title">getAll</span><span class="params">(Url url)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from tools_jump where adminNickName = #&#123;adminNickName&#125; ORDER BY createTime"</span>)</span><br><span class="line">    <span class="function">List&lt;Url&gt; <span class="title">selectPage</span><span class="params">(PageRequest pageRequest)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanjie.ljtools.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.entity.PageRequest;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.entity.PageResult;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.entity.Url;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: ljtools</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hanjie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-24 09:46</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IJumpService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询接口</span></span><br><span class="line"><span class="comment">     * 这里统一封装了分页请求和结果，避免直接引入具体框架的分页对象, 如MyBatis或JPA的分页对象</span></span><br><span class="line"><span class="comment">     * 从而避免因为替换ORM框架而导致服务层、控制层的分页接口也需要变动的情况，替换ORM框架也不会</span></span><br><span class="line"><span class="comment">     * 影响服务层以上的分页接口，起到了解耦的作用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageRequest 自定义，统一分页查询请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> PageResult 自定义，统一分页查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">PageResult <span class="title">findPage</span><span class="params">(PageRequest pageRequest)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>impl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanjie.ljtools.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.common.ResultStatus;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.dao.IJumpDao;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.entity.PageRequest;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.entity.PageResult;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.entity.Url;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.service.IJumpService;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.utils.BaiDuShortUrl;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.utils.PageUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: ljtools</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hanjie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-24 09:46</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IJumpServiceImpl</span> <span class="keyword">implements</span> <span class="title">IJumpService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IJumpDao jumpDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    Result result;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageResult <span class="title">findPage</span><span class="params">(PageRequest pageRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PageUtils.getPageResult(getPageInfo(pageRequest));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用分页插件完成分页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> PageInfo&lt;Url&gt; <span class="title">getPageInfo</span><span class="params">(PageRequest pageRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pageNum = pageRequest.getPageNum();</span><br><span class="line">        <span class="keyword">int</span> pageSize = pageRequest.getPageSize();</span><br><span class="line">        PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">        List&lt;Url&gt; sysMenus = jumpDao.selectPage(pageRequest);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageInfo&lt;Url&gt;(sysMenus);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller层</p>
<p>前端只需要将PageRequest里面的参数传入即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hanjie.ljtools.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.entity.PageRequest;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.entity.Url;</span><br><span class="line"><span class="keyword">import</span> com.hanjie.ljtools.service.IJumpService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: ljtools</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: hanjie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-24 09:43</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IJumpService iJumpService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    Result result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(String.valueOf(AdminController<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value=<span class="string">"/findPage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">findPage</span><span class="params">(@RequestBody PageRequest pageQuery)</span> </span>&#123;</span><br><span class="line">        result.setData(iJumpService.findPage(pageQuery));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="vue部分代码"><a href="#vue部分代码" class="headerlink" title="vue部分代码"></a>vue部分代码</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">initTable()&#123;</span><br><span class="line">        let postData &#x3D; &#123;</span><br><span class="line">            pageNum: this.currentPage,</span><br><span class="line">            pageSize: 8,</span><br><span class="line">        &#125;</span><br><span class="line">        this.instance.getAll(postData)</span><br><span class="line">            .then(successResponse &#x3D;&gt; &#123;</span><br><span class="line">                if (successResponse.data.code &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">                    this.tableData &#x3D; successResponse.data.data.content;</span><br><span class="line">                    this.total &#x3D; parseInt(successResponse.data.data.totalSize);</span><br><span class="line">                &#125; else if (successResponse.data.code &#x3D;&#x3D;&#x3D; 4001) &#123;</span><br><span class="line">                    this.$message.error(&#39;表格初始化失败&#39;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>分页</tag>
      </tags>
  </entry>
  <entry>
    <title>json字符串和json对象json数组的区别</title>
    <url>/posts/c1a3a6c4/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>微信公众号实现百度文库下载</title>
    <url>/posts/b9cc406a/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>vue axios和qs用法笔记</title>
    <url>/posts/22da897c/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>前后端分离项目后台接收post参数的几种方式</title>
    <url>/posts/b34dcc60/</url>
    <content><![CDATA[<p>最近刚好在整一个前后端分离项目，然后遇到了一些后台接收前端传来的参数的问题，做下笔记以后好看看</p>
<a id="more"></a>

<h5 id="第一种：-RequestParam注解"><a href="#第一种：-RequestParam注解" class="headerlink" title="第一种：@RequestParam注解"></a>第一种：@RequestParam注解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	@RequestParam(value = <span class="string">"username"</span>, required = <span class="keyword">false</span>)</span>	String username,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"password"</span>, required = <span class="keyword">false</span>)</span>	String password,</span></span><br><span class="line"><span class="function">    Model model)</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"username:"</span>+ username + <span class="string">",password:"</span>+password);</span><br><span class="line">    ...........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="第二种：-RequestBody注解"><a href="#第二种：-RequestBody注解" class="headerlink" title="第二种：@RequestBody注解"></a>第二种：@RequestBody注解</h5><p>这个方式接收参数的话，需要前端的参数名跟我们的实体类保持一致</p>
<p><strong>后端代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/adminLogin"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">adminLogin</span><span class="params">(@RequestBody Admin admin)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"AdminUserController login run"</span>);</span><br><span class="line">        Result result = adminService.adminLogin(admin);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>前端代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">loginSubmit(name) &#123;</span><br><span class="line">            let postData &#x3D; &#123;</span><br><span class="line">                adminPassword: md5(md5(this.admin.adminPassword)),</span><br><span class="line">                adminNickName: this.admin.adminNickName,</span><br><span class="line">            &#125;</span><br><span class="line">            this.instance.adminLogin(postData)</span><br></pre></td></tr></table></figure>

<p><strong>Admin类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//后台密码</span></span><br><span class="line">    <span class="keyword">private</span> String adminPassword;</span><br><span class="line">    <span class="comment">//后台用户名</span></span><br><span class="line">    <span class="keyword">private</span> String adminNickName;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAdminPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adminPassword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdminPassword</span><span class="params">(String adminPassword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adminPassword = adminPassword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAdminNickName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adminNickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdminNickName</span><span class="params">(String adminNickName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adminNickName = adminNickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="第三种-HttpServletRequest方式接收参数"><a href="#第三种-HttpServletRequest方式接收参数" class="headerlink" title="第三种:HttpServletRequest方式接收参数"></a>第三种:HttpServletRequest方式接收参数</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">adminLogin</span><span class="params">(HttpServletRequest httpServletRequest,Model model)</span> </span>&#123;</span><br><span class="line">    String username = httpServletRequest.getParameter(<span class="string">"username"</span>);</span><br><span class="line">    String password = httpServletRequest.getParameter(<span class="string">"password"</span>);</span><br><span class="line">    System.out.println(<span class="string">"username:"</span>+ username + <span class="string">",password:"</span>+password);</span><br><span class="line">    ...........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是前后端分离的话，还需要设置一下跨域的问题。如果是post请求还得设置一些请求头</p>
]]></content>
      <categories>
        <category>前后端交互</category>
      </categories>
      <tags>
        <tag>前后端交互,java,ssm</tag>
      </tags>
  </entry>
  <entry>
    <title>docker的安装和使用</title>
    <url>/posts/3a02fd99/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>学习到docker，记录下方便以后查看</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>

<a id="more"></a>

<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>使用VirtualBox虚拟机 + CentOS7系统</p>
<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>首先最好更新下软件包跟内核</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure>

<p>安装docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure>

<p>启动docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure>

<p>将docker设置为开机启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>

<h3 id="更改docker镜像，加快下载速度"><a href="#更改docker镜像，加快下载速度" class="headerlink" title="更改docker镜像，加快下载速度"></a>更改docker镜像，加快下载速度</h3><p>1.创建daemon.json文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br></pre></td></tr></table></figure>

<p>2.复制阿里云镜像粘贴在daemon.json文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;registry-mirrors&quot;:[&quot;https:&#x2F;&#x2F;6kx4zyno.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.重启docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="docker安装mysql"><a href="#docker安装mysql" class="headerlink" title="docker安装mysql"></a>docker安装mysql</h3><p>1.搜索镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure>

<p>2.拉取镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line">指定版本</span><br><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>

<p>3.查看镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>4.运行镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name mysql（自定义容器名） -d(后台运行) images-name(指定镜像模板)</span><br></pre></td></tr></table></figure>

<p>5.查看运行中的容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p>6.停止容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop 容器的id</span><br></pre></td></tr></table></figure>

<p>7.删除容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm [IMAGE ID]</span><br></pre></td></tr></table></figure>

<p>8.删除镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi [IMAGE ID]</span><br></pre></td></tr></table></figure>

<p>9.启动一个做了端口映射的tomcat</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8888:8080 tomcat</span><br><span class="line">-d：后台运行</span><br><span class="line">-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</span><br></pre></td></tr></table></figure>

<p>10.查看容器的日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker logs container-name&#x2F;container-id</span><br></pre></td></tr></table></figure>



<h3 id="MySql部署"><a href="#MySql部署" class="headerlink" title="MySql部署"></a>MySql部署</h3><p>1.拉取MySQL镜像，我这里选择5.7版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>

<p>2.创建容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql:5.7</span><br></pre></td></tr></table></figure>

<p>-p:端口映射，格式为 宿主机映射端口:容器运行端口</p>
<p>-e:添加环境变量</p>
<p>-d:后台运行</p>
<p>MYSQL_ROOT_PASSWORD:设置root用户的登录密码</p>
<p>3.远程连接宿主机的ip，指定端口号为3306，用户名root，密码123456</p>
<h3 id="tomcat部署"><a href="#tomcat部署" class="headerlink" title="tomcat部署"></a>tomcat部署</h3><p>1.拉取镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure>

<p>2.创建挂载目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;mnt&#x2F;tomcat</span><br></pre></td></tr></table></figure>

<p>3.创建容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d --name tomcat_tool -p 8080:8080 -v &#x2F;mnt&#x2F;tomcat&#x2F;webapps:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps --privileged&#x3D;true a7fa4ac97be4（镜像id）</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql增删改查</title>
    <url>/posts/215f538f/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>mysql的增删改查</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>

<a id="more"></a>

<p><strong>一、创建数据库</strong></p>
<p>create database &lt;数据库名称&gt;;</p>
<p><strong>二、使用该数据库</strong></p>
<p>use &lt;数据库名称&gt;;</p>
<p><strong>三、创建表</strong></p>
<p>create table &lt;表名&gt;;</p>
<p><strong>四、查询语句(select)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from &lt;表名&gt;； (获取表中所有数据，一般不推荐这种写法)</span><br></pre></td></tr></table></figure>

<p>order by排序语句</p>
<p>asc升序(默认)，desc降序 </p>
<p>order by 子句应该位于select语句的结尾</p>
<p><strong>五、插入语句(insert)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into user (id,username,userage,sex) values (&#39;1001&#39;,&#39;包租婆&#39;,&#39;18&#39;,&#39;女&#39;);</span><br></pre></td></tr></table></figure>

<h5 id="六、更新语句（update）"><a href="#六、更新语句（update）" class="headerlink" title="六、更新语句（update）"></a><strong>六、更新语句（update）</strong></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">updata user set username&#x3D;&#39;包租公&#39; where id &#x3D; 1001;</span><br></pre></td></tr></table></figure>

<p><strong>七、删除语句（delete）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from user where id &#x3D; 1001;</span><br></pre></td></tr></table></figure>

<p><strong>WHERE常用的查询条件有：</strong></p>
<p>比较运算：&gt;、&gt;=、&lt;、&lt;=、=、&lt;&gt;(或!=)<br>范围查询：[NOT] BETWEEN &lt;值1&gt; AND &lt;值2&gt;<br>集合查询： [NOT] IN &lt;集合&gt;<br>空值查询：IS [NOT] null<br>字符匹配查询： [NOT] LIKE &lt;匹配字符串&gt;<br>逻辑查询：AND、OR、NOT</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
